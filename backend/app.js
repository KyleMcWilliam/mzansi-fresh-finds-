const express = require('express');
const path = require('path');
const config = require('./config/config');

// Initialize Express app
const app = express();

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// API Routes
app.use('/api/auth', require('./routes/auth'));
app.use('/api/stores', require('./routes/stores'));
app.use('/api/deals',require('./routes/deals'));
app.use('/api/products', require('./routes/products'));

// --- Serve React Frontend in Production ---
// The following logic integrates the backend with the React frontend.
// In a production environment, the Express server will serve the static files
// (like index.html, main.js, main.css) generated by the 'npm run build' command
// in the 'frontend' directory.

// Check if the environment is production
if (process.env.NODE_ENV === 'production') {
  // Set the static folder to the React app's build directory
  app.use(express.static(path.join(__dirname, '../frontend/build')));

  // For any GET request that doesn't match an API route,
  // send back the React app's index.html file.
  // This allows React Router to handle client-side routing.
  app.get('*', (req, res) => {
    res.sendFile(path.resolve(__dirname, '../frontend', 'build', 'index.html'));
  });
} else {
  // In development, the frontend is served by the React development server (on a different port),
  // so the backend only needs to handle API routes.
  // We can add a simple root route for the API in development.
  app.get('/', (req, res) => {
    res.send('API is running...');
  });
}

// Custom Error Handling Middleware
app.use((err, req, res, next) => {
  console.error('Unhandled Error:', err.stack || err);
  const statusCode = err.statusCode || 500;
  const message = err.message || 'Internal Server Error';
  res.status(statusCode).json({
    success: false,
    error: message,
  });
});

module.exports = app;
